/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started

@title: Ace_Ten_(Blackjack)
@author: Splat
@tags: [forever]
@addedOn: 2024-00-00
*/

// Define card bitmaps
const spade = "s";
const heart = "h";
const diamond = "d";
const club = "c";
const table = "t";

// Define the card deck
const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];
const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

let deck = [];

// Define the card values
const CARD_VALUES = {
    "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "10": 10,
    "J": 10, "Q": 10, "K": 10, "A": 11
};

let playerHand = [];
let dealerHand = [];
let playerTotal = 0;
let dealerTotal = 0;
let playerBalance = 100; // Initial balance for the player
let betAmount = 0; // Track the bet amount
let initialDrawDone = false;
let gameOver = false;

// Create the deck by combining suits and values
function initializeDeck() {
    deck = [];
    for (let suit of suits) {
        for (let value of values) {
            deck.push({ suit: suit, value: value });
        }
    }
    shuffleDeck();
}

// Shuffle the deck
function shuffleDeck() {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
}

// Generate a random card
function getRandomCard() {
    if (deck.length === 0) initializeDeck();
    return deck.pop();
}

// Function to calculate the total value of a hand
function handTotal(hand) {
    let total = 0;
    let aceCount = 0;
    
    for (let card of hand) {
        total += CARD_VALUES[card.value];
        if (card.value === "A") aceCount++;
    }
    
    while (total > 21 && aceCount > 0) {
        total -= 10;
        aceCount--;
    }
    
    return total;
}

// Function to place a bet
function placeBet(amount) {
    if (amount <= playerBalance) {
        betAmount = amount;
        playerBalance -= amount;
        console.log(`Bet placed: ${amount}`);
        console.log(`Remaining balance: ${playerBalance}`);
    } else {
        console.log("Insufficient balance to place the bet.");
    }
}

// Function to update player's balance based on game outcome
function updateBalance(outcome) {
    switch (outcome) {
        case "win":
            playerBalance += 2 * betAmount; // Win doubles the bet amount
            break;
        case "blackjack":
            playerBalance += 2.5 * betAmount; // Blackjack pays 3:2
            break;
        default:
            // No additional balance changes on loss or push
    }
}

// Draw initial cards
function dealInitialCards() {
    playerHand = [getRandomCard(), getRandomCard()];
    dealerHand = [getRandomCard(), getRandomCard()];
    initialDrawDone = true;
    displayDealerCards(false);
    displayPlayerCards();

    if (handTotal(playerHand) === 21) {
        displayDealerCards(true);
        playerWin(true);
    }
}

// Draw the player's hand on the screen
function displayPlayerCards() {
    let playerX = 2; // X coordinate to start drawing player's hand
    let playerY = 10; // Y coordinate to start drawing player's hand

    for (let card of playerHand) {
        let cardBitmap = getCardBitmap(card.suit, card.value);
        addSprite(playerX, playerY, cardBitmap);
        playerX += 20; // Adjust X position for next card, assuming card width is 20 pixels
        // Ensure the card does not go out of bounds
        if (playerX > 140) {
            playerX = 2; // Reset X position
            playerY += 20; // Move to the next row
        }
    }
}

// Draw the dealer's hand on the screen
function displayDealerCards(reveal) {
    let dealerX = 2; // X coordinate to start drawing dealer's hand
    let dealerY = 2; // Y coordinate to start drawing dealer's hand

    for (let i = 0; i < dealerHand.length; i++) {
        if (!reveal && i === 1) {
            addSprite(dealerX, dealerY, faceDown); // Hide second card if not finished
        } else {
            addSprite(dealerX, dealerY, getCardBitmap(dealerHand[i].suit, dealerHand[i].value));
        }
        dealerX += 20; // Adjust X position for next card, assuming card width is 20 pixels
        // Ensure the card does not go out of bounds
        if (dealerX > 140) {
            dealerX = 2; // Reset X position
            dealerY += 20; // Move to the next row
        }
    }
}

// Get card bitmap based on suit and value
function getCardBitmap(suit, value) {
    // Example bitmaps for card suits (place actual bitmaps here)
    return suit === 'Hearts' ? heart : suit === 'Diamonds' ? diamond : suit === 'Clubs' ? club : spade;
}

// Function for the dealer's turn
function dealerTurn() {
    while (handTotal(dealerHand) < 17) {
        dealerHand.push(getRandomCard());
        displayDealerCards(true);
    }

    let dealerTotal = handTotal(dealerHand);
    if (dealerTotal > 21) {
        playerWin();
    } else {
        compareHands();
    }
}

// Compare player and dealer hands
function compareHands() {
    let playerTotal = handTotal(playerHand);
    let dealerTotal = handTotal(dealerHand);

    if (playerTotal > 21) {
        dealerWin();
    } else if (dealerTotal > 21 || playerTotal > dealerTotal) {
        playerWin();
    } else if (playerTotal < dealerTotal) {
        dealerWin();
    } else {
        pushGame();
    }
}

// Handle player win
function playerWin(isBlackjack = false) {
    updateBalance(isBlackjack ? "blackjack" : "win");
    addText("Player Wins!", { x: 0, y: 15, color: color`0` });
    gameOver = true;
}

// Handle dealer win
function dealerWin() {
    addText("Dealer Wins!", { x: 0, y: 15, color: color`0` });
    gameOver = true;
}

// Handle push (tie)
function pushGame() {
    addText("Push! It's a tie.", { x: 0, y: 15, color: color`0` });
    playerBalance += betAmount; // Return the bet amount
    gameOver = true;
}

// Function to reset the game
function resetGame() {
    gameOver = false;
    clearText();
    initializeDeck();
    dealInitialCards();
    displayDealerCards(false);
    displayPlayerCards();
    addText("Dealer's hand", { x: 3, y: 2, color: color`0` });
    addText("Your hand", { x: 3, y: 30, color: color`0` }); // Adjust Y position to avoid overlap
    addText("Total bet: " + betAmount, { x: 0, y: 0, color: color`0` });
    addText("Total credits: " + playerBalance, { x: 0, y: 15, color: color`0` });
}

// Input handlers
onInput("w", () => {
    if (!initialDrawDone && !gameOver) {
        resetGame();
    }
});

onInput("a", () => {
    if (gameOver) {
        resetGame();
    } else if (!initialDrawDone) {
        dealInitialCards();
        displayDealerCards(false);
        displayPlayerCards();
    } else if (!gameOver) {
        playerHand.push(getRandomCard());
        displayPlayerCards();
        if (handTotal(playerHand) > 21) {
            displayDealerCards(true);
            dealerWin();
        } else if (handTotal(playerHand) === 21) {
            displayDealerCards(true);
            if (handTotal(dealerHand) === 21) {
                pushGame();
            } else {
                playerWin();
            }
        } else {
            dealerTurn();
        }
    }
});

onInput("d", () => {
    if (initialDrawDone && playerHand.length === 2 && !gameOver) {
        playerHand.push(getRandomCard());
        displayPlayerCards();
        if (handTotal(playerHand) > 21) {
            displayDealerCards(true);
            dealerWin();
        } else {
            dealerTurn();
        }
    }
});

onInput("s", () => {
    if (!gameOver) {
        stand();
    }
});

// Define card bitmaps
// Define the face-down card bitmap
const faceDown = "f";

// Set the card bitmaps, including the face-down card
setLegend(
    [ spade, bitmap`
    ..000000000000..
    ..0..........0..
    ..0....00....0..
    ..0...0000...0..
    ..0...0000...0..
    ..0..000000..0..
    ..0.00000000.0..
    ..000000000000..
    ..000000000000..
    ..000000000000..
    ..000000000000..
    ..0..0000000.0..
    ..0....000...0..
    ..0....00....0..
    ..0...0000...0..
    ..000000000000..` ],
    [ heart, bitmap`
    ..000000000000..
    ..0..........0..
    ..0.33....33.0..
    ..0.333..333.0..
    ..033333333330..
    ..033333333330..
    ..033333333330..
    ..033333333330..
    ..033333333330..
    ..0.33333333.0..
    ..0..333333..0..
    ..0...3333...0..
    ..0....33....0..
    ..0..........0..
    ..0..........0..
    ..000000000000..` ],
    [ diamond, bitmap`
    ..000000000000..
    ..0..........0..
    ..0....33....0..
    ..0...3333...0..
    ..0...3333...0..
    ..0..333333..0..
    ..0.33333333.0..
    ..033333333330..
    ..033333333330..
    ..0.33333333.0..
    ..0..333333..0..
    ..0...3333...0..
    ..0...3333...0..
    ..0....33....0..
    ..0..........0..
    ..000000000000..` ],
    [ club, bitmap`
    ..000000000000..
    ..0...0000...0..
    ..0..000000..0..
    ..0..000000..0..
    ..0...0000...0..
    ..0.00.00.00.0..
    ..000000000000..
    ..000000000000..
    ..000000000000..
    ..000000000000..
    ..0.00.00.00.0..
    ..0....00....0..
    ..0...0000...0..
    ..0..000000..0..
    ..0.00000000.0..
    ..000000000000..` ],
    [ table, bitmap`
    ................
    ................
    ................
    ................
    ................
    ................
    ................
    LLLLLLLLLL......
    LLLLLLLLLL......
    ................
    ................
    ................
    ................
    ................
    ................
    ................` ],
    [ faceDown, bitmap`
    ..000000000000..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..0..........0..
    ..000000000000..
    ..000000000000..` ]
);



setMap(map`
............
............
............
............
............
............
............
............
............
............
............
............`)


// Initialize the game
initializeDeck();
resetGame();
